#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

// Structure to represent a station
struct Station {
    int id;
    int distance;

    Station(int _id, int _distance) : id(_id), distance(_distance) {}
};

class RailNetwork {
private:
    int numStations;
    vector<vector<int>> graph;

public:
    RailNetwork(int n) : numStations(n), graph(n, vector<int>(n, 0)) {}

    void addConnection(int from, int to, int distance) {
        graph[from][to] = distance;
        graph[to][from] = distance;  // Assuming undirected rail network
    }

    void dijkstra(int start, int end);
};

void RailNetwork::dijkstra(int start, int end) {
    vector<Station> stations(numStations, Station(0, numeric_limits<int>::max()));

    stations[start].distance = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int currentDistance = pq.top().first;
        int currentStation = pq.top().second;
        pq.pop();

        if (currentStation == end) {
            // Shortest path found
            break;
        }

        for (int i = 0; i < numStations; ++i) {
            if (graph[currentStation][i] > 0) {
                int newDistance = currentDistance + graph[currentStation][i];
                if (newDistance < stations[i].distance) {
                    stations[i].distance = newDistance;
                    pq.push({newDistance, i});
                }
            }
        }
    }

    // Extract the shortest path
    vector<int> path;
    int currentStation = end;
    while (currentStation != start) {
        path.insert(path.begin(), currentStation);
        for (int i = 0; i < numStations; ++i) {
            if (graph[currentStation][i] > 0 && stations[i].distance + graph[currentStation][i] == stations[currentStation].distance) {
                currentStation = i;
                break;
            }
        }
    }
    path.insert(path.begin(), start);

    // Print the shortest path
    cout << "Shortest path from " << start << " to " << end << ": ";
    for (int station : path) {
        cout << station << " -> ";
    }
    cout << "\nShortest distance: " << stations[end].distance << endl;
}

int main() {
    RailNetwork railNetwork(4);

    railNetwork.addConnection(0, 1, 1);
    railNetwork.addConnection(0, 2, 4);
    railNetwork.addConnection(1, 2, 2);
    railNetwork.addConnection(1, 3, 5);
    railNetwork.addConnection(2, 3, 1);

    int startStation = 0;
    int endStation = 3;

    railNetwork.dijkstra(startStation, endStation);

    return 0;
}
